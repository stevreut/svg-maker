{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 Challenge 8 Video - notes\
\

\f1\b0\fs24 0. URL:\
	
\fs18 https://zoom.us/rec/play/0OwyTjUTbLFr1IQvgfde24G6b-SeWiqDkSCBKbaJ-pY9wnIC3BmYOczsekwkwCFrNmi40SbKkwZHm0Xg.0LkzGgvB00v3l5-o?canPlayFromShare=true&from=share_recording_detail&continueMode=true&componentName=rec-play&originRequestUrl=https%3A%2F%2Fzoom.us%2Frec%2Fshare%2FySiB9JkXkrZC393YATaGJVJvGy0Q1-dIk-l6gPs4c1uW8-lHN2bOb-KIdBXVwsLr.qJEXuvEm0xoHfVIL
\fs28 \
\

\fs24 1. Although test-driven methodology typically indicates writing tests FIRST, this particularly challenge does not really lend itself to that approach and, that being the case, it is suggested that tests be saved for last.  Note, however, that tests ARE required.\
\
2. We will be generating SVG graphics files.  Specifically, we are required to have (1) a circle, (2) a square, and (3) a triangle.  Documentation for SVG files is available on MDN at \
\
	https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Introduction\
\
(Triangle will require use of the \'93Polygon\'94 object.  Circle and Squre are already available out of the box.)\
\
3. Note that requirements call for a specific folder and file structure which includes a SINGLE shapes.js file which, in turn is to have specific class \'93Circle\'94, \'93Triangle\'94, and \'93Square\'94.  In addition, there should be a parent (superclass) called Shape which includes any common properties.\
\
4. as usual, .gitignore should contain \'93node_modules\'94 and \'93.DS_Store\'94. (Remember, \'93git status\'94 can be used to confirm that the node_modules folder is being properly ignored.)\
\
5. Other commands for getting started:\
	Make sure you have created a folder of the desired repo name within the ~/repos/ folder\
	cd ~/repos/<repo_name>\
	touch index.js\
	touch .gitignore\
	[alter .gitignore as shown in 4 above]\
	mkdir lib\
	touch lib/shapes.js	[but leave blank for now]\
	touch lib/shapes.test.js.  [but leave blank for now]\
	mkdir examples\
	npm init -y.   (note, defaults to index.js as main)\
	npm install jest\
	alter package.json file so that scripts contains \'93test\'94: \'93jest \'97verbose\'94\
	git init\
	git status\
	touch README.md\
	[alter README.md with just Title and Description - FOR NOW]\
	(No mention in video at this point about remote (github.com) aspect. (?))\
\
6. SVG\
	Start by just MANUALLY creating an SVG.\
		This is literally just a file whose name ends in .svg, and which contains mark-up like content between <svg> and </svg> tags.\
\
7. Classes\
	Shape class\
		will have a render() method will return a string which is the embedded svg encoding of a shape and which is to be included in the <svg></svg> (.svg) file.\
	Remember, when extending a parent class, you need TWO things:\
		* \'93extends\'94 keyword\
		* call to super(\'85) in the FIRST line of the child class\'92 constructor\
	Shape will only have the properties that are COMMON to ALL shapes.  In the example, a constructor for Shape might only have constructor(fill), whereas Circle might have constructor(fill, radius, \'85)\
	Note that one can have default values in constructors as follows:\
		constructor(fill = \'93green\'94) will use \'93green\'94 as the default value for the fill parameter if that parameter is not provided.\
	setFill(\'85) method should be in Shape class since it will be applicable to Shape and all its children (and, in fact, the implementation would be invariant - not overridden.). (Actually referred to as \'93setColor()\'94)\
\
8. svg.js\
	Will be needed, distinct from Shape.js\
	At first, just unit test SVG(with desired constructor values) working.  No need to immediately worry about inquirer prompts.  That can come later.\
\
\
\
9. Dane\'92s fs output snippet:\
	fs.writeFile(\'93shape.svg\'94, example.makrUp, function(err)\{\
		if(err)\
		console.log(err)\
	\})\
\
10. Can verify that output from render() method is as expected given certain parameters.\
	A handfull of tests is adequate for the project.\
	\
\
	}